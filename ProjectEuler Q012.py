#The sequence of triangle numbers is generated by adding the natural numbers. 
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
#The first ten terms would be:

#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.

#What is the value of the first triangle number to have over five hundred divisors?
def primetrigger(x):
    trigger = 1
    i=2
    while i <x:
        if ((x)%i ==0): trigger=0; break 
        i+=1
    return trigger
#while primenumber(new)!=1:
def primefactors(x):
    primefactor =[]
    new=x
    i=2
    while i <new:
        #print new
        if primetrigger(new)==1:
            primefactor.append(new)
            new=new/new
        else:    
            if primetrigger(i) ==1 :
                if new%i==0 : 
                    primefactor.append(i)
                    new = new/i
                    i=1
        i+=1
    return primefactor

def f7(seq):
    seen = set()
    seen_add = seen.add
    print seen
    return [ x for x in seq if not (x in seen or seen_add(x))]

def f1(seq):
    seen=set()
    [seen.add(x) for x in seq]
    return seen

import math

trigger = 0
x=1
divisor =200
while trigger ==0:
    tri=0
    for i in xrange(1,x):
        tri +=i
    count=1
    primefactor = primefactors(tri)
    uniqueprimefactor =f1(primefactor)
    for i in uniqueprimefactor:
        #number of factors is a function of number of unique prime factors)
        count = (primefactor.count(i)+1)*count
    if count>divisor:
        trigger =1
        print tri
    x+=1
